version: '3.8'

networks:
  kafka-network:
    driver: bridge

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 8090
      ZOOKEEPER_TICK_TIME: 2000
      KAFKA_OPTS: "-Dzookeeper.4lw.commands.whitelist=ruok,stat,conf"
    ports:
      - "8090:8090"
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:8090
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "9092:9092"
    networks:
      - kafka-network

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    ports:
      - "8081:8081"
    networks:
      - kafka-network

  postgres:
    image: debezium/postgres:13
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: careerDB
    ports:
      - "5432:5432"
    networks:
      - kafka-network

  connect:
    image: debezium/connect:2.5
    container_name: connect
    depends_on:
      - kafka
      - schema-registry
      - postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
    networks:
      - kafka-network

  qdrant:
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    networks:
      - kafka-network

  fastapi-consumer:
    build:
      context: .
    image: fastapi
    volumes:
      - ./:/app
    env_file:
      - .env
    depends_on:
      kafka:
        condition: service_healthy
      qdrant:
        condition: service_started
    ports:
      - "8000:8000"
    networks:
      - kafka-network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    logging:
      driver: loki
      options:
        loki-url: "http://loki:3100/loki/api/v1/push"
        loki-batch-size: "400"
        loki-retries: "5"
        loki-pipeline-stages: |
          - json:
              expressions:
                level: level
                msg: message
                
  loki:
    image: grafana/loki:2.8.2
    container_name: loki
    environment:
      LOKI_STORAGE_BACKEND: filesystem
      LOKI_STORAGE_PATH: /loki-data
    volumes:
      - loki-data:/loki-data
    ports:
      - "3100:3100"
    networks:
      - kafka-network

  loki-grafana:
    image: grafana/grafana:9.0.6
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    depends_on:
      - loki
    networks:
      - kafka-network

volumes:
  loki-data:
    driver: local
